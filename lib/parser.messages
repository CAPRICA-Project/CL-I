start: X__ERR_TOK2
##
## Concrete syntax: <????>
##
## Ends in an error in state: 0.
##
## start' -> . start [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID <????>
##
## Ends in an error in state: 1.
##
## dot_rhs_ty -> UID . [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> UID . rhs_type_params [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> UID . nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> UID . rhs_type_params nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## UID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID STAR X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID * <????>
##
## Ends in an error in state: 3.
##
## nonempty_list(cardinality) -> STAR . [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> STAR . nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
##
## The known suffix of the stack is as follows:
## STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID SQUARE X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID [] <????>
##
## Ends in an error in state: 4.
##
## nonempty_list(cardinality) -> SQUARE . [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> SQUARE . nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
##
## The known suffix of the stack is as follows:
## SQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID PLUS X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID + <????>
##
## Ends in an error in state: 5.
##
## nonempty_list(cardinality) -> PLUS . [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> PLUS . nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
##
## The known suffix of the stack is as follows:
## PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LBRACK X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID [ <????>
##
## Ends in an error in state: 6.
##
## nonempty_list(cardinality) -> LBRACK . rhs(False) RBRACK [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK . rhs(False) ETC rhs(False) RBRACK [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK . rhs(False) ETC RBRACK [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK . ETC rhs(False) RBRACK [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK . rhs(False) RBRACK nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK . rhs(False) ETC rhs(False) RBRACK nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK . rhs(False) ETC RBRACK nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK . ETC rhs(False) RBRACK nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LPAREN X__ERR_TOK2
##
## Concrete syntax: " ( <????>
##
## Ends in an error in state: 11.
##
## inpar(more_list(COMMA,rhs(False))) -> LPAREN . more_list(COMMA,rhs(False)) RPAREN [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> LPAREN . rhs(False) RPAREN [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LBRACK X__ERR_TOK2
##
## Concrete syntax: [ <????>
##
## Ends in an error in state: 13.
##
## dot_rhs -> LBRACK . rhs_list RBRACK [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING IF X__ERR_TOK2
##
## Concrete syntax: " if <????>
##
## Ends in an error in state: 14.
##
## rhs(False) -> IF . rhs_value THEN rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> IF . rhs_value THEN rhs(False) ELSE rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: IF LPAREN X__ERR_TOK2
##
## Concrete syntax: if ( <????>
##
## Ends in an error in state: 15.
##
## inpar(more_list(COMMA,rhs(False))) -> LPAREN . more_list(COMMA,rhs(False)) RPAREN [ THEN SET ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: FOR X__ERR_TOK2
##
## Concrete syntax: for <????>
##
## Ends in an error in state: 16.
##
## z3_property -> FOR . ALL z3_parameters LBRACE list(rhs(True)) RBRACE [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## FOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: FOR ALL X__ERR_TOK2
##
## Concrete syntax: for all <????>
##
## Ends in an error in state: 17.
##
## z3_property -> FOR ALL . z3_parameters LBRACE list(rhs(True)) RBRACE [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## FOR ALL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: EXISTS LPAREN X__ERR_TOK2
##
## Concrete syntax: exists ( <????>
##
## Ends in an error in state: 18.
##
## inpar(separated_nonempty_list(COMMA,tpar(lhs_id,True))) -> LPAREN . separated_nonempty_list(COMMA,tpar(lhs_id,True)) RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: EXISTS LPAREN LPAREN X__ERR_TOK2
##
## Concrete syntax: exists ( ( <????>
##
## Ends in an error in state: 19.
##
## inpar(_fun_in_par(t,lhs_id)) -> LPAREN . _fun_in_par(t,lhs_id) RPAREN [ RPAREN OFTYPE EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: EXISTS LPAREN LID X__ERR_TOK2
##
## Concrete syntax: exists ( lowercase_ID <????>
##
## Ends in an error in state: 20.
##
## _fun_in_par(t,lhs_id) -> LID . [ RPAREN EQUAL COMMA COLON ]
## _fun_in_par(t,lhs_id) -> LID . of_type [ RPAREN EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID OFTYPE X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID : <????>
##
## Ends in an error in state: 21.
##
## of_type -> OFTYPE . typespec [ RPAREN EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## OFTYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC LPAREN X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID < ( <????>
##
## Ends in an error in state: 23.
##
## inpar(more_list(COMMA,typespec)) -> LPAREN . more_list(COMMA,typespec) RPAREN [ RPAREN RABRAC OFTYPE EQUAL COMMA COLON ARROW ]
## typename -> LPAREN . RPAREN [ RPAREN RABRAC OFTYPE EQUAL COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING X__ERR_TOK2
##
## Concrete syntax: " <????>
##
## Ends in an error in state: 26.
##
## str -> BSTRING . _str ESTRING [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## BSTRING
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING STRING X__ERR_TOK2
##
## Concrete syntax: " string${ <????>
##
## Ends in an error in state: 27.
##
## _str -> STRING . _str [ ESTRING ]
##
## The known suffix of the stack is as follows:
## STRING
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: EXISTS X__ERR_TOK2
##
## Concrete syntax: exists <????>
##
## Ends in an error in state: 28.
##
## z3_property -> EXISTS . z3_parameters LBRACE list(rhs(True)) RBRACE [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## EXISTS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: EXISTS LPAREN LID RPAREN X__ERR_TOK2
##
## Concrete syntax: exists ( lowercase_ID ) <????>
##
## Ends in an error in state: 29.
##
## z3_property -> EXISTS z3_parameters . LBRACE list(rhs(True)) RBRACE [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## EXISTS z3_parameters
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: EXISTS LPAREN LID RPAREN LBRACE X__ERR_TOK2
##
## Concrete syntax: exists ( lowercase_ID ) {  <????>
##
## Ends in an error in state: 30.
##
## z3_property -> EXISTS z3_parameters LBRACE . list(rhs(True)) RBRACE [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## EXISTS z3_parameters LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LPAREN X__ERR_TOK2
##
## Concrete syntax: ( <????>
##
## Ends in an error in state: 31.
##
## inpar(more_list(COMMA,rhs(False))) -> LPAREN . more_list(COMMA,rhs(False)) RPAREN [ STAR SET RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE COLON BANG ]
## rhs(False) -> LPAREN . rhs(False) RPAREN [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> LPAREN . rhs(False) RPAREN COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LPAREN LID RBRACK
##
## Concrete syntax: ( lowercase_ID ]
##
## Ends in an error in state: 38.
##
## more_list(COMMA,rhs(False)) -> rhs(False) . COMMA separated_nonempty_list(COMMA,rhs(False)) [ RPAREN ]
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> LPAREN rhs(False) . RPAREN [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> LPAREN rhs(False) . RPAREN COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LPAREN rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID STAR X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID * <????>
##
## Ends in an error in state: 39.
##
## rhs(False) -> rhs(False) STAR . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) STAR . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID STAR LID THEN
##
## Concrete syntax: " lowercase_ID * lowercase_ID then
##
## Ends in an error in state: 40.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) STAR rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) STAR rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID BANG X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID ! <????>
##
## Ends in an error in state: 41.
##
## rhs(False) -> rhs(False) BANG . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) BANG . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) BANG
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID BANG LITEXP X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID ! <<literal expression>> <????>
##
## Ends in an error in state: 42.
##
## rhs(False) -> rhs(False) BANG LITEXP . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) BANG LITEXP . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) BANG LITEXP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID BANG LITEXP LID THEN
##
## Concrete syntax: " lowercase_ID ! <<literal expression>> lowercase_ID then
##
## Ends in an error in state: 43.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) BANG LITEXP rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) BANG LITEXP rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID POSTOP4 X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID %% <????>
##
## Ends in an error in state: 44.
##
## rhs(False) -> rhs(False) POSTOP4 . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) POSTOP4 . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP4
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID POSTOP4 LID THEN
##
## Concrete syntax: " lowercase_ID %% lowercase_ID then
##
## Ends in an error in state: 45.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) POSTOP4 rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP4 rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING BANG X__ERR_TOK2
##
## Concrete syntax: " ! <????>
##
## Ends in an error in state: 46.
##
## rhs(False) -> preop . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## preop
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING BANG LID THEN
##
## Concrete syntax: " ! lowercase_ID then
##
## Ends in an error in state: 47.
##
## rhs(False) -> preop rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## preop rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID RPAREN
##
## Concrete syntax: Uppercase_ID )
##
## Ends in an error in state: 49.
##
## dot_rhs -> dot_rhs_ty . DOT LID [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs_ty . DOT str [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs_ty . DOT SQUARE [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs_ty . LBRACE RBRACE [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs_ty . LBRACE nonempty_list(set) RBRACE [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs_ty -> dot_rhs_ty . DOT UID [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs_ty . DOT UID rhs_type_params [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs_ty . DOT UID nonempty_list(cardinality) [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs_ty . DOT UID rhs_type_params nonempty_list(cardinality) [ LPAREN LBRACE DOT ]
## tcall(dot_rhs_ty,rhs(False)) -> dot_rhs_ty . some(parameter_list(lax(rhs(False)))) [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## dot_rhs_ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production dot_rhs_ty -> UID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LPAREN X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID ( <????>
##
## Ends in an error in state: 50.
##
## inpar(arg_list(lax(rhs(False)))) -> LPAREN . arg_list(lax(rhs(False))) RPAREN [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## some(parameter_list(lax(rhs(False)))) -> LPAREN . RPAREN [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LPAREN ETC X__ERR_TOK2
##
## Concrete syntax: lowercase_ID ( ... <????>
##
## Ends in an error in state: 53.
##
## arg_list(lax(rhs(False))) -> ETC . COMMA arg_list_was_etc(lax(rhs(False))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## ETC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LPAREN ETC COMMA X__ERR_TOK2
##
## Concrete syntax: lowercase_ID ( ... , <????>
##
## Ends in an error in state: 54.
##
## arg_list(lax(rhs(False))) -> ETC COMMA . arg_list_was_etc(lax(rhs(False))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## ETC COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LPAREN LID RBRACK
##
## Concrete syntax: lowercase_ID ( lowercase_ID ]
##
## Ends in an error in state: 55.
##
## lax(rhs(False)) -> rhs(False) . [ RPAREN COMMA ]
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID RABRAC X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID > <????>
##
## Ends in an error in state: 56.
##
## rhs(False) -> rhs(False) RABRAC . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) RABRAC . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) RABRAC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID RABRAC LID THEN
##
## Concrete syntax: " lowercase_ID > lowercase_ID then
##
## Ends in an error in state: 57.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) RABRAC rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) RABRAC rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID POSTOP3 X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID +$ <????>
##
## Ends in an error in state: 58.
##
## rhs(False) -> rhs(False) POSTOP3 . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) POSTOP3 . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP3
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID POSTOP3 LID THEN
##
## Concrete syntax: " lowercase_ID +$ lowercase_ID then
##
## Ends in an error in state: 59.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) POSTOP3 rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP3 rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID X__ERR_TOK2
##
## Concrete syntax: lowercase_ID <????>
##
## Ends in an error in state: 60.
##
## call(dot_rhs,rhs(False)) -> dot_rhs . LPAREN RPAREN [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## call(dot_rhs,rhs(False)) -> dot_rhs . inpar(arg_list(lax(rhs(False)))) [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs . DOT LID [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs . DOT str [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs . DOT SQUARE [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs . LBRACE RBRACE [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs . LBRACE nonempty_list(set) RBRACE [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs_ty -> dot_rhs . DOT UID [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs . DOT UID rhs_type_params [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs . DOT UID nonempty_list(cardinality) [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs . DOT UID rhs_type_params nonempty_list(cardinality) [ LPAREN LBRACE DOT ]
## rhs_value -> dot_rhs . [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## dot_rhs
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LPAREN X__ERR_TOK2
##
## Concrete syntax: lowercase_ID ( <????>
##
## Ends in an error in state: 61.
##
## call(dot_rhs,rhs(False)) -> dot_rhs LPAREN . RPAREN [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## inpar(arg_list(lax(rhs(False)))) -> LPAREN . arg_list(lax(rhs(False))) RPAREN [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## dot_rhs LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LPAREN QMARK X__ERR_TOK2
##
## Concrete syntax: lowercase_ID ( ? <????>
##
## Ends in an error in state: 63.
##
## arg_list(lax(rhs(False))) -> lax(rhs(False)) . COMMA arg_list_continue(lax(rhs(False))) [ RPAREN ]
## arg_list(lax(rhs(False))) -> lax(rhs(False)) . [ RPAREN ]
##
## The known suffix of the stack is as follows:
## lax(rhs(False))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LPAREN LID COMMA X__ERR_TOK2
##
## Concrete syntax: lowercase_ID ( lowercase_ID , <????>
##
## Ends in an error in state: 64.
##
## arg_list(lax(rhs(False))) -> lax(rhs(False)) COMMA . arg_list_continue(lax(rhs(False))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## lax(rhs(False)) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LPAREN LID COMMA ETC X__ERR_TOK2
##
## Concrete syntax: lowercase_ID ( lowercase_ID , ... <????>
##
## Ends in an error in state: 65.
##
## arg_list_continue(lax(rhs(False))) -> ETC . COMMA arg_list_was_etc(lax(rhs(False))) [ RPAREN ]
## arg_list_continue(lax(rhs(False))) -> ETC . [ RPAREN ]
##
## The known suffix of the stack is as follows:
## ETC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LPAREN LID COMMA ETC COMMA X__ERR_TOK2
##
## Concrete syntax: lowercase_ID ( lowercase_ID , ... , <????>
##
## Ends in an error in state: 66.
##
## arg_list_continue(lax(rhs(False))) -> ETC COMMA . arg_list_was_etc(lax(rhs(False))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## ETC COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LPAREN ETC COMMA QMARK X__ERR_TOK2
##
## Concrete syntax: lowercase_ID ( ... , ? <????>
##
## Ends in an error in state: 67.
##
## arg_list_was_etc(lax(rhs(False))) -> lax(rhs(False)) . COMMA arg_list_continue(lax(rhs(False))) [ RPAREN ]
## arg_list_was_etc(lax(rhs(False))) -> lax(rhs(False)) . [ RPAREN ]
##
## The known suffix of the stack is as follows:
## lax(rhs(False))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LPAREN ETC COMMA LID COMMA X__ERR_TOK2
##
## Concrete syntax: lowercase_ID ( ... , lowercase_ID , <????>
##
## Ends in an error in state: 68.
##
## arg_list_was_etc(lax(rhs(False))) -> lax(rhs(False)) COMMA . arg_list_continue(lax(rhs(False))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## lax(rhs(False)) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LPAREN LID COMMA QMARK X__ERR_TOK2
##
## Concrete syntax: lowercase_ID ( lowercase_ID , ? <????>
##
## Ends in an error in state: 69.
##
## arg_list_continue(lax(rhs(False))) -> lax(rhs(False)) . COMMA arg_list_continue(lax(rhs(False))) [ RPAREN ]
## arg_list_continue(lax(rhs(False))) -> lax(rhs(False)) . [ RPAREN ]
##
## The known suffix of the stack is as follows:
## lax(rhs(False))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LPAREN LID COMMA LID COMMA X__ERR_TOK2
##
## Concrete syntax: lowercase_ID ( lowercase_ID , lowercase_ID , <????>
##
## Ends in an error in state: 70.
##
## arg_list_continue(lax(rhs(False))) -> lax(rhs(False)) COMMA . arg_list_continue(lax(rhs(False))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## lax(rhs(False)) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LBRACE X__ERR_TOK2
##
## Concrete syntax: lowercase_ID {  <????>
##
## Ends in an error in state: 78.
##
## dot_rhs -> dot_rhs LBRACE . RBRACE [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs LBRACE . nonempty_list(set) RBRACE [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## dot_rhs LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LBRACE LID THEN
##
## Concrete syntax: lowercase_ID {  lowercase_ID then
##
## Ends in an error in state: 80.
##
## nonempty_list(set) -> rhs_value . SET rhs(True) [ RBRACE ]
## nonempty_list(set) -> rhs_value . SET rhs(True) nonempty_list(set) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## rhs_value
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LBRACE LID SET X__ERR_TOK2
##
## Concrete syntax: lowercase_ID {  lowercase_ID <- <????>
##
## Ends in an error in state: 81.
##
## nonempty_list(set) -> rhs_value SET . rhs(True) [ RBRACE ]
## nonempty_list(set) -> rhs_value SET . rhs(True) nonempty_list(set) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## rhs_value SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: IF X__ERR_TOK2
##
## Concrete syntax: if <????>
##
## Ends in an error in state: 82.
##
## rhs(False) -> IF . rhs_value THEN rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> IF . rhs_value THEN rhs(False) ELSE rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> IF . rhs_value THEN rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> IF . rhs_value THEN rhs(False) ELSE rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: IF LID STAR
##
## Concrete syntax: if lowercase_ID *
##
## Ends in an error in state: 83.
##
## rhs(False) -> IF rhs_value . THEN rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> IF rhs_value . THEN rhs(False) ELSE rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> IF rhs_value . THEN rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> IF rhs_value . THEN rhs(False) ELSE rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## IF rhs_value
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: IF LID THEN X__ERR_TOK2
##
## Concrete syntax: if lowercase_ID then <????>
##
## Ends in an error in state: 84.
##
## rhs(False) -> IF rhs_value THEN . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> IF rhs_value THEN . rhs(False) ELSE rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> IF rhs_value THEN . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> IF rhs_value THEN . rhs(False) ELSE rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## IF rhs_value THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: EXISTS LPAREN LID RPAREN LBRACE RBRACE X__ERR_TOK2
##
## Concrete syntax: exists ( lowercase_ID ) {   } <????>
##
## Ends in an error in state: 85.
##
## rhs(False) -> z3_property . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> z3_property . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## z3_property
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BANG LID THEN
##
## Concrete syntax: ! lowercase_ID then
##
## Ends in an error in state: 87.
##
## rhs(False) -> rhs_value . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs_value . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs_value
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID STAR X__ERR_TOK2
##
## Concrete syntax: lowercase_ID * <????>
##
## Ends in an error in state: 91.
##
## rhs(False) -> rhs(False) STAR . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) STAR . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) STAR . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) STAR . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False) STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID BANG X__ERR_TOK2
##
## Concrete syntax: lowercase_ID ! <????>
##
## Ends in an error in state: 95.
##
## rhs(False) -> rhs(False) BANG . LITEXP [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) BANG . LITEXP rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) BANG . LITEXP COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) BANG . LITEXP rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False) BANG
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID BANG LITEXP X__ERR_TOK2
##
## Concrete syntax: lowercase_ID ! <<literal expression>> <????>
##
## Ends in an error in state: 96.
##
## rhs(False) -> rhs(False) BANG LITEXP . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) BANG LITEXP . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) BANG LITEXP . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) BANG LITEXP . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False) BANG LITEXP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID POSTOP4 X__ERR_TOK2
##
## Concrete syntax: lowercase_ID %% <????>
##
## Ends in an error in state: 100.
##
## rhs(False) -> rhs(False) POSTOP4 . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) POSTOP4 . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) POSTOP4 . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) POSTOP4 . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP4
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BANG X__ERR_TOK2
##
## Concrete syntax: ! <????>
##
## Ends in an error in state: 104.
##
## rhs(False) -> preop . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> preop . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## preop
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BANG LID BANG
##
## Concrete syntax: ! lowercase_ID !
##
## Ends in an error in state: 106.
##
## rhs(False) -> preop rhs(False) . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) . POSTOP0 COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP1 COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP2 COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . EQUAL COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . LABRAC COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . RABRAC COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP3 COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . PLUS COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . MINUS COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . LITEXP COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP4 COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . STAR COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP0 rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP1 rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP2 rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . LABRAC rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . RABRAC rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP3 rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . PLUS rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . MINUS rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . LITEXP rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP4 rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . STAR rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . BANG LITEXP COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . BANG LITEXP rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## preop rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 87, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID RABRAC X__ERR_TOK2
##
## Concrete syntax: lowercase_ID > <????>
##
## Ends in an error in state: 107.
##
## rhs(False) -> rhs(False) RABRAC . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) RABRAC . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) RABRAC . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) RABRAC . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False) RABRAC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID POSTOP3 X__ERR_TOK2
##
## Concrete syntax: lowercase_ID +$ <????>
##
## Ends in an error in state: 111.
##
## rhs(False) -> rhs(False) POSTOP3 . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) POSTOP3 . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) POSTOP3 . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) POSTOP3 . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP3
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID PLUS X__ERR_TOK2
##
## Concrete syntax: lowercase_ID + <????>
##
## Ends in an error in state: 115.
##
## rhs(False) -> rhs(False) PLUS . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) PLUS . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) PLUS . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) PLUS . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False) PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID MINUS X__ERR_TOK2
##
## Concrete syntax: lowercase_ID - <????>
##
## Ends in an error in state: 119.
##
## rhs(False) -> rhs(False) MINUS . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) MINUS . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) MINUS . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) MINUS . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False) MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LITEXP X__ERR_TOK2
##
## Concrete syntax: lowercase_ID <<literal expression>> <????>
##
## Ends in an error in state: 123.
##
## rhs(False) -> rhs(False) LITEXP . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) LITEXP . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) LITEXP . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) LITEXP . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False) LITEXP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID POSTOP2 X__ERR_TOK2
##
## Concrete syntax: lowercase_ID => <????>
##
## Ends in an error in state: 127.
##
## rhs(False) -> rhs(False) POSTOP2 . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) POSTOP2 . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) POSTOP2 . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) POSTOP2 . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID POSTOP1 X__ERR_TOK2
##
## Concrete syntax: lowercase_ID and <????>
##
## Ends in an error in state: 131.
##
## rhs(False) -> rhs(False) POSTOP1 . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) POSTOP1 . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) POSTOP1 . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) POSTOP1 . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP1
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LABRAC X__ERR_TOK2
##
## Concrete syntax: lowercase_ID < <????>
##
## Ends in an error in state: 135.
##
## rhs(False) -> rhs(False) LABRAC . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) LABRAC . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) LABRAC . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) LABRAC . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False) LABRAC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID EQUAL X__ERR_TOK2
##
## Concrete syntax: lowercase_ID = <????>
##
## Ends in an error in state: 139.
##
## rhs(False) -> rhs(False) EQUAL . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) EQUAL . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) EQUAL . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) EQUAL . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID POSTOP0 X__ERR_TOK2
##
## Concrete syntax: lowercase_ID or <????>
##
## Ends in an error in state: 143.
##
## rhs(False) -> rhs(False) POSTOP0 . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(False) -> rhs(False) POSTOP0 . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> rhs(False) POSTOP0 . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) POSTOP0 . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP0
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: IF LID THEN LID ELSE X__ERR_TOK2
##
## Concrete syntax: if lowercase_ID then lowercase_ID else <????>
##
## Ends in an error in state: 147.
##
## rhs(False) -> IF rhs_value THEN rhs(False) ELSE . rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> IF rhs_value THEN rhs(False) ELSE . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## IF rhs_value THEN rhs(False) ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID LBRACE LID SET LID COLON X__ERR_TOK2
##
## Concrete syntax: lowercase_ID {  lowercase_ID <- lowercase_ID ; <????>
##
## Ends in an error in state: 150.
##
## nonempty_list(set) -> rhs_value SET rhs(True) . [ RBRACE ]
## nonempty_list(set) -> rhs_value SET rhs(True) . nonempty_list(set) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## rhs_value SET rhs(True)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID POSTOP0 ELSE
##
## Concrete syntax: lowercase_ID or else
##
## Ends in an error in state: 152.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(True) -> rhs(False) . POSTOP0 COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP1 COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP2 COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . EQUAL COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . LABRAC COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . RABRAC COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP3 COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . PLUS COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . MINUS COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . LITEXP COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP4 COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . STAR COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP0 rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP1 rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP2 rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . LABRAC rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . RABRAC rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP3 rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . PLUS rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . MINUS rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . LITEXP rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . POSTOP4 rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . STAR rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . BANG LITEXP COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(True) -> rhs(False) . BANG LITEXP rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 143, spurious reduction of production rhs(False) -> rhs(False) POSTOP0
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID DOT X__ERR_TOK2
##
## Concrete syntax: lowercase_ID . <????>
##
## Ends in an error in state: 155.
##
## dot_rhs -> dot_rhs DOT . LID [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs DOT . str [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs DOT . SQUARE [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs_ty -> dot_rhs DOT . UID [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs DOT . UID rhs_type_params [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs DOT . UID nonempty_list(cardinality) [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs DOT . UID rhs_type_params nonempty_list(cardinality) [ LPAREN LBRACE DOT ]
##
## The known suffix of the stack is as follows:
## dot_rhs DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID DOT UID X__ERR_TOK2
##
## Concrete syntax: lowercase_ID . Uppercase_ID <????>
##
## Ends in an error in state: 156.
##
## dot_rhs_ty -> dot_rhs DOT UID . [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs DOT UID . rhs_type_params [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs DOT UID . nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs DOT UID . rhs_type_params nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## dot_rhs DOT UID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID < <????>
##
## Ends in an error in state: 157.
##
## type_params(lax(typespec_or_word)) -> LABRAC . loption(separated_nonempty_list(COMMA,arg(lax(typespec_or_word)))) RABRAC [ STAR SQUARE RPAREN RABRAC PLUS OFTYPE LPAREN LBRACK LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
##
## The known suffix of the stack is as follows:
## LABRAC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC QMARK X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID < ? <????>
##
## Ends in an error in state: 159.
##
## lax(tagged_type) -> QMARK . [ ARROW ]
## lax(typespec_or_word) -> QMARK . [ RABRAC COMMA ]
##
## The known suffix of the stack is as follows:
## QMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC ETC X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID < ... <????>
##
## Ends in an error in state: 160.
##
## arg(lax(tagged_type)) -> ETC . [ ARROW ]
## arg(lax(typespec_or_word)) -> ETC . [ RABRAC COMMA ]
##
## The known suffix of the stack is as follows:
## ETC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC LPAREN RPAREN X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID < ( ) <????>
##
## Ends in an error in state: 165.
##
## lax(tagged_type) -> tagged_type . [ ARROW ]
## typespec -> tagged_type . [ RPAREN RABRAC OFTYPE EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## tagged_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID OFTYPE QMARK X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID : ? <????>
##
## Ends in an error in state: 169.
##
## arrow_list -> left_arrow_list . ARROW lax(tagged_type) [ RPAREN RABRAC OFTYPE EQUAL COMMA COLON ]
## left_arrow_list -> left_arrow_list . ARROW arg(lax(tagged_type)) [ ARROW ]
##
## The known suffix of the stack is as follows:
## left_arrow_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC UID ARROW X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID < Uppercase_ID -> <????>
##
## Ends in an error in state: 170.
##
## arrow_list -> left_arrow_list ARROW . lax(tagged_type) [ RPAREN RABRAC OFTYPE EQUAL COMMA COLON ]
## left_arrow_list -> left_arrow_list ARROW . arg(lax(tagged_type)) [ ARROW ]
##
## The known suffix of the stack is as follows:
## left_arrow_list ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC UID ARROW QMARK X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID < Uppercase_ID -> ? <????>
##
## Ends in an error in state: 172.
##
## arg(lax(tagged_type)) -> lax(tagged_type) . [ ARROW ]
## arrow_list -> left_arrow_list ARROW lax(tagged_type) . [ RPAREN RABRAC OFTYPE EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## left_arrow_list ARROW lax(tagged_type)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC UID PLUS COMPONENT
##
## Concrete syntax: Uppercase_ID < Uppercase_ID + component
##
## Ends in an error in state: 174.
##
## dot_rhs -> dot_rhs_ty . DOT LID [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs_ty . DOT str [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs_ty . DOT SQUARE [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs_ty . LBRACE RBRACE [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs_ty . LBRACE nonempty_list(set) RBRACE [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs_ty . DOT UID [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs_ty . DOT UID rhs_type_params [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs_ty . DOT UID nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs_ty . DOT UID rhs_type_params nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## tcall(dot_rhs_ty,rhs(False)) -> dot_rhs_ty . some(parameter_list(lax(rhs(False)))) [ LPAREN LBRACE DOT ]
## typename -> dot_rhs_ty . [ RPAREN RABRAC OFTYPE EQUAL COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## dot_rhs_ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 5, spurious reduction of production nonempty_list(cardinality) -> PLUS
## In state 299, spurious reduction of production dot_rhs_ty -> UID nonempty_list(cardinality)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LBRACE X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID {  <????>
##
## Ends in an error in state: 175.
##
## dot_rhs -> dot_rhs_ty LBRACE . RBRACE [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs_ty LBRACE . nonempty_list(set) RBRACE [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## dot_rhs_ty LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC UID DOT X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID < Uppercase_ID . <????>
##
## Ends in an error in state: 179.
##
## dot_rhs -> dot_rhs_ty DOT . LID [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs_ty DOT . str [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs_ty DOT . SQUARE [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs_ty DOT . UID [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs_ty DOT . UID rhs_type_params [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs_ty DOT . UID nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs_ty DOT . UID rhs_type_params nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## dot_rhs_ty DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID DOT UID X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID . Uppercase_ID <????>
##
## Ends in an error in state: 180.
##
## dot_rhs_ty -> dot_rhs_ty DOT UID . [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs_ty DOT UID . rhs_type_params [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs_ty DOT UID . nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs_ty DOT UID . rhs_type_params nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## dot_rhs_ty DOT UID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID DOT UID WORD X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID . Uppercase_ID `word` <????>
##
## Ends in an error in state: 182.
##
## dot_rhs_ty -> dot_rhs_ty DOT UID rhs_type_params . [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs_ty DOT UID rhs_type_params . nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## dot_rhs_ty DOT UID rhs_type_params
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC LID X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID < lowercase_ID <????>
##
## Ends in an error in state: 190.
##
## call(dot_rhs,rhs(False)) -> dot_rhs . LPAREN RPAREN [ LPAREN LBRACE DOT ]
## call(dot_rhs,rhs(False)) -> dot_rhs . inpar(arg_list(lax(rhs(False)))) [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs . DOT LID [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs . DOT str [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs . DOT SQUARE [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs . LBRACE RBRACE [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs . LBRACE nonempty_list(set) RBRACE [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs . DOT UID [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs . DOT UID rhs_type_params [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs . DOT UID nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs . DOT UID rhs_type_params nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## dot_rhs
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC LID DOT X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID < lowercase_ID . <????>
##
## Ends in an error in state: 191.
##
## dot_rhs -> dot_rhs DOT . LID [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs DOT . str [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs DOT . SQUARE [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs DOT . UID [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs DOT . UID rhs_type_params [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs DOT . UID nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs DOT . UID rhs_type_params nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## dot_rhs DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC WORD X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID < `word` <????>
##
## Ends in an error in state: 200.
##
## separated_nonempty_list(COMMA,arg(lax(typespec_or_word))) -> arg(lax(typespec_or_word)) . [ RABRAC ]
## separated_nonempty_list(COMMA,arg(lax(typespec_or_word))) -> arg(lax(typespec_or_word)) . COMMA separated_nonempty_list(COMMA,arg(lax(typespec_or_word))) [ RABRAC ]
##
## The known suffix of the stack is as follows:
## arg(lax(typespec_or_word))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC UID COMMA X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID < Uppercase_ID , <????>
##
## Ends in an error in state: 201.
##
## separated_nonempty_list(COMMA,arg(lax(typespec_or_word))) -> arg(lax(typespec_or_word)) COMMA . separated_nonempty_list(COMMA,arg(lax(typespec_or_word))) [ RABRAC ]
##
## The known suffix of the stack is as follows:
## arg(lax(typespec_or_word)) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID DOT UID WORD X__ERR_TOK2
##
## Concrete syntax: lowercase_ID . Uppercase_ID `word` <????>
##
## Ends in an error in state: 204.
##
## dot_rhs_ty -> dot_rhs DOT UID rhs_type_params . [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> dot_rhs DOT UID rhs_type_params . nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## dot_rhs DOT UID rhs_type_params
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID PLUS X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID + <????>
##
## Ends in an error in state: 207.
##
## rhs(False) -> rhs(False) PLUS . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) PLUS . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID PLUS LID THEN
##
## Concrete syntax: " lowercase_ID + lowercase_ID then
##
## Ends in an error in state: 208.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) PLUS rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) PLUS rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID MINUS X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID - <????>
##
## Ends in an error in state: 209.
##
## rhs(False) -> rhs(False) MINUS . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) MINUS . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID MINUS LID THEN
##
## Concrete syntax: " lowercase_ID - lowercase_ID then
##
## Ends in an error in state: 210.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) MINUS rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) MINUS rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID LITEXP X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID <<literal expression>> <????>
##
## Ends in an error in state: 211.
##
## rhs(False) -> rhs(False) LITEXP . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) LITEXP . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) LITEXP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID LITEXP LID THEN
##
## Concrete syntax: " lowercase_ID <<literal expression>> lowercase_ID then
##
## Ends in an error in state: 212.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) LITEXP rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) LITEXP rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID POSTOP2 X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID => <????>
##
## Ends in an error in state: 213.
##
## rhs(False) -> rhs(False) POSTOP2 . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) POSTOP2 . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID POSTOP2 LID THEN
##
## Concrete syntax: " lowercase_ID => lowercase_ID then
##
## Ends in an error in state: 214.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) POSTOP2 rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP2 rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID POSTOP1 X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID and <????>
##
## Ends in an error in state: 215.
##
## rhs(False) -> rhs(False) POSTOP1 . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) POSTOP1 . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP1
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID POSTOP1 LID THEN
##
## Concrete syntax: " lowercase_ID and lowercase_ID then
##
## Ends in an error in state: 216.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) POSTOP1 rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP1 rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID LABRAC X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID < <????>
##
## Ends in an error in state: 217.
##
## rhs(False) -> rhs(False) LABRAC . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) LABRAC . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) LABRAC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID LABRAC LID THEN
##
## Concrete syntax: " lowercase_ID < lowercase_ID then
##
## Ends in an error in state: 218.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) LABRAC rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) LABRAC rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID EQUAL X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID = <????>
##
## Ends in an error in state: 219.
##
## rhs(False) -> rhs(False) EQUAL . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) EQUAL . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID EQUAL LID THEN
##
## Concrete syntax: " lowercase_ID = lowercase_ID then
##
## Ends in an error in state: 220.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) EQUAL rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) EQUAL rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID POSTOP0 X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID or <????>
##
## Ends in an error in state: 221.
##
## rhs(False) -> rhs(False) POSTOP0 . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) POSTOP0 . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP0
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID POSTOP0 LID THEN
##
## Concrete syntax: " lowercase_ID or lowercase_ID then
##
## Ends in an error in state: 222.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) POSTOP0 rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False) POSTOP0 rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID DOT X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID . <????>
##
## Ends in an error in state: 224.
##
## dot_rhs -> dot_rhs_ty DOT . LID [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs_ty DOT . str [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs -> dot_rhs_ty DOT . SQUARE [ THEN STAR SET RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LPAREN LITEXP LBRACE LABRAC HOOK ETC EQUAL ELSE EEXPR DOT COMMA COLON BANG ]
## dot_rhs_ty -> dot_rhs_ty DOT . UID [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs_ty DOT . UID rhs_type_params [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs_ty DOT . UID nonempty_list(cardinality) [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs_ty DOT . UID rhs_type_params nonempty_list(cardinality) [ LPAREN LBRACE DOT ]
##
## The known suffix of the stack is as follows:
## dot_rhs_ty DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LPAREN LID RPAREN X__ERR_TOK2
##
## Concrete syntax: ( lowercase_ID ) <????>
##
## Ends in an error in state: 225.
##
## rhs(False) -> LPAREN rhs(False) RPAREN . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL ELSE BANG ]
## rhs(True) -> LPAREN rhs(False) RPAREN . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF HOOK FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LPAREN rhs(False) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LPAREN LID COMMA X__ERR_TOK2
##
## Concrete syntax: ( lowercase_ID , <????>
##
## Ends in an error in state: 227.
##
## more_list(COMMA,rhs(False)) -> rhs(False) COMMA . separated_nonempty_list(COMMA,rhs(False)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## rhs(False) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LPAREN LID COMMA LID RBRACK
##
## Concrete syntax: ( lowercase_ID , lowercase_ID ]
##
## Ends in an error in state: 229.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## separated_nonempty_list(COMMA,rhs(False)) -> rhs(False) . [ RPAREN ]
## separated_nonempty_list(COMMA,rhs(False)) -> rhs(False) . COMMA separated_nonempty_list(COMMA,rhs(False)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LPAREN LID COMMA LID COMMA X__ERR_TOK2
##
## Concrete syntax: ( lowercase_ID , lowercase_ID , <????>
##
## Ends in an error in state: 230.
##
## separated_nonempty_list(COMMA,rhs(False)) -> rhs(False) COMMA . separated_nonempty_list(COMMA,rhs(False)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## rhs(False) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: EXISTS LPAREN LID RPAREN LBRACE LID COLON X__ERR_TOK2
##
## Concrete syntax: exists ( lowercase_ID ) {  lowercase_ID ; <????>
##
## Ends in an error in state: 234.
##
## list(rhs(True)) -> rhs(True) . list(rhs(True)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## rhs(True)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID RPAREN
##
## Concrete syntax: " lowercase_ID )
##
## Ends in an error in state: 239.
##
## _str -> rhs(False) . EEXPR _str [ ESTRING ]
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL EEXPR BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LID EEXPR X__ERR_TOK2
##
## Concrete syntax: " lowercase_ID } <????>
##
## Ends in an error in state: 240.
##
## _str -> rhs(False) EEXPR . _str [ ESTRING ]
##
## The known suffix of the stack is as follows:
## rhs(False) EEXPR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC LPAREN UID RPAREN
##
## Concrete syntax: Uppercase_ID < ( Uppercase_ID )
##
## Ends in an error in state: 245.
##
## more_list(COMMA,typespec) -> typespec . COMMA separated_nonempty_list(COMMA,typespec) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## typespec
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production dot_rhs_ty -> UID
## In state 174, spurious reduction of production typename -> dot_rhs_ty
## In state 163, spurious reduction of production tagged_type -> typename
## In state 165, spurious reduction of production typespec -> tagged_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC LPAREN UID COMMA X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID < ( Uppercase_ID , <????>
##
## Ends in an error in state: 246.
##
## more_list(COMMA,typespec) -> typespec COMMA . separated_nonempty_list(COMMA,typespec) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## typespec COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC LPAREN UID COMMA UID RABRAC
##
## Concrete syntax: Uppercase_ID < ( Uppercase_ID , Uppercase_ID >
##
## Ends in an error in state: 247.
##
## separated_nonempty_list(COMMA,typespec) -> typespec . [ RPAREN ]
## separated_nonempty_list(COMMA,typespec) -> typespec . COMMA separated_nonempty_list(COMMA,typespec) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## typespec
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production dot_rhs_ty -> UID
## In state 174, spurious reduction of production typename -> dot_rhs_ty
## In state 163, spurious reduction of production tagged_type -> typename
## In state 165, spurious reduction of production typespec -> tagged_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LABRAC LPAREN UID COMMA UID COMMA X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID < ( Uppercase_ID , Uppercase_ID , <????>
##
## Ends in an error in state: 248.
##
## separated_nonempty_list(COMMA,typespec) -> typespec COMMA . separated_nonempty_list(COMMA,typespec) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## typespec COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: EXISTS LPAREN LPAREN LID RPAREN X__ERR_TOK2
##
## Concrete syntax: exists ( ( lowercase_ID ) <????>
##
## Ends in an error in state: 255.
##
## _fun_in_par(t,lhs_id) -> inpar(_fun_in_par(t,lhs_id)) . [ RPAREN EQUAL COMMA COLON ]
## _fun_in_par(t,lhs_id) -> inpar(_fun_in_par(t,lhs_id)) . of_type [ RPAREN EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## inpar(_fun_in_par(t,lhs_id))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: EXISTS LPAREN LPAREN LID EQUAL
##
## Concrete syntax: exists ( ( lowercase_ID =
##
## Ends in an error in state: 257.
##
## inpar(_fun_in_par(t,lhs_id)) -> LPAREN _fun_in_par(t,lhs_id) . RPAREN [ RPAREN OFTYPE EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN _fun_in_par(t,lhs_id)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production _fun_in_par(t,lhs_id) -> LID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: EXISTS LPAREN LID EQUAL
##
## Concrete syntax: exists ( lowercase_ID =
##
## Ends in an error in state: 261.
##
## separated_nonempty_list(COMMA,tpar(lhs_id,True)) -> _fun_in_par(t,lhs_id) . [ RPAREN ]
## separated_nonempty_list(COMMA,tpar(lhs_id,True)) -> _fun_in_par(t,lhs_id) . COMMA separated_nonempty_list(COMMA,tpar(lhs_id,True)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## _fun_in_par(t,lhs_id)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production _fun_in_par(t,lhs_id) -> LID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: EXISTS LPAREN LID COMMA X__ERR_TOK2
##
## Concrete syntax: exists ( lowercase_ID , <????>
##
## Ends in an error in state: 262.
##
## separated_nonempty_list(COMMA,tpar(lhs_id,True)) -> _fun_in_par(t,lhs_id) COMMA . separated_nonempty_list(COMMA,tpar(lhs_id,True)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## _fun_in_par(t,lhs_id) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: FOR ALL LPAREN LID RPAREN X__ERR_TOK2
##
## Concrete syntax: for all ( lowercase_ID ) <????>
##
## Ends in an error in state: 264.
##
## z3_property -> FOR ALL z3_parameters . LBRACE list(rhs(True)) RBRACE [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## FOR ALL z3_parameters
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: FOR ALL LPAREN LID RPAREN LBRACE X__ERR_TOK2
##
## Concrete syntax: for all ( lowercase_ID ) {  <????>
##
## Ends in an error in state: 265.
##
## z3_property -> FOR ALL z3_parameters LBRACE . list(rhs(True)) RBRACE [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## FOR ALL z3_parameters LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: IF LPAREN LID RPAREN
##
## Concrete syntax: if ( lowercase_ID )
##
## Ends in an error in state: 268.
##
## more_list(COMMA,rhs(False)) -> rhs(False) . COMMA separated_nonempty_list(COMMA,rhs(False)) [ RPAREN ]
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
##
## The known suffix of the stack is as follows:
## rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING IF LID STAR
##
## Concrete syntax: " if lowercase_ID *
##
## Ends in an error in state: 269.
##
## rhs(False) -> IF rhs_value . THEN rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> IF rhs_value . THEN rhs(False) ELSE rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## IF rhs_value
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING IF LID THEN X__ERR_TOK2
##
## Concrete syntax: " if lowercase_ID then <????>
##
## Ends in an error in state: 270.
##
## rhs(False) -> IF rhs_value THEN . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> IF rhs_value THEN . rhs(False) ELSE rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## IF rhs_value THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING IF LID THEN LID THEN
##
## Concrete syntax: " if lowercase_ID then lowercase_ID then
##
## Ends in an error in state: 271.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> IF rhs_value THEN rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> IF rhs_value THEN rhs(False) . ELSE rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## IF rhs_value THEN rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING IF LID THEN LID ELSE X__ERR_TOK2
##
## Concrete syntax: " if lowercase_ID then lowercase_ID else <????>
##
## Ends in an error in state: 272.
##
## rhs(False) -> IF rhs_value THEN rhs(False) ELSE . rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## IF rhs_value THEN rhs(False) ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING IF LID THEN LID ELSE LID THEN
##
## Concrete syntax: " if lowercase_ID then lowercase_ID else lowercase_ID then
##
## Ends in an error in state: 273.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
## rhs(False) -> IF rhs_value THEN rhs(False) ELSE rhs(False) . [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## IF rhs_value THEN rhs(False) ELSE rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LBRACK LID RPAREN
##
## Concrete syntax: [ lowercase_ID )
##
## Ends in an error in state: 276.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COLON BANG ]
## rhs_list -> rhs(False) . [ RBRACK ]
## rhs_list -> rhs(False) . COLON rhs_list [ RBRACK ]
##
## The known suffix of the stack is as follows:
## rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LBRACK LID COLON X__ERR_TOK2
##
## Concrete syntax: [ lowercase_ID ; <????>
##
## Ends in an error in state: 277.
##
## rhs_list -> rhs(False) COLON . rhs_list [ RBRACK ]
##
## The known suffix of the stack is as follows:
## rhs(False) COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: BSTRING LPAREN LID RBRACK
##
## Concrete syntax: " ( lowercase_ID ]
##
## Ends in an error in state: 279.
##
## more_list(COMMA,rhs(False)) -> rhs(False) . COMMA separated_nonempty_list(COMMA,rhs(False)) [ RPAREN ]
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RPAREN RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL COMMA BANG ]
## rhs(False) -> LPAREN rhs(False) . RPAREN [ STAR RPAREN RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL ELSE EEXPR COMMA COLON BANG ]
##
## The known suffix of the stack is as follows:
## LPAREN rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LBRACK ETC X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID [ ... <????>
##
## Ends in an error in state: 281.
##
## nonempty_list(cardinality) -> LBRACK ETC . rhs(False) RBRACK [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK ETC . rhs(False) RBRACK nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACK ETC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LBRACK ETC LID RPAREN
##
## Concrete syntax: Uppercase_ID [ ... lowercase_ID )
##
## Ends in an error in state: 282.
##
## nonempty_list(cardinality) -> LBRACK ETC rhs(False) . RBRACK [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK ETC rhs(False) . RBRACK nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
##
## The known suffix of the stack is as follows:
## LBRACK ETC rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LBRACK ETC LID RBRACK X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID [ ... lowercase_ID ] <????>
##
## Ends in an error in state: 283.
##
## nonempty_list(cardinality) -> LBRACK ETC rhs(False) RBRACK . [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK ETC rhs(False) RBRACK . nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACK ETC rhs(False) RBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LBRACK LID RPAREN
##
## Concrete syntax: Uppercase_ID [ lowercase_ID )
##
## Ends in an error in state: 285.
##
## nonempty_list(cardinality) -> LBRACK rhs(False) . RBRACK [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK rhs(False) . ETC rhs(False) RBRACK [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK rhs(False) . ETC RBRACK [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK rhs(False) . RBRACK nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK rhs(False) . ETC rhs(False) RBRACK nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK rhs(False) . ETC RBRACK nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC ETC EQUAL BANG ]
##
## The known suffix of the stack is as follows:
## LBRACK rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LBRACK LID RBRACK X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID [ lowercase_ID ] <????>
##
## Ends in an error in state: 286.
##
## nonempty_list(cardinality) -> LBRACK rhs(False) RBRACK . [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK rhs(False) RBRACK . nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACK rhs(False) RBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LBRACK LID ETC X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID [ lowercase_ID ... <????>
##
## Ends in an error in state: 288.
##
## nonempty_list(cardinality) -> LBRACK rhs(False) ETC . rhs(False) RBRACK [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK rhs(False) ETC . RBRACK [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK rhs(False) ETC . rhs(False) RBRACK nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK rhs(False) ETC . RBRACK nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACK rhs(False) ETC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LBRACK LID ETC RBRACK X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID [ lowercase_ID ... ] <????>
##
## Ends in an error in state: 289.
##
## nonempty_list(cardinality) -> LBRACK rhs(False) ETC RBRACK . [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK rhs(False) ETC RBRACK . nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACK rhs(False) ETC RBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LBRACK LID ETC LID RPAREN
##
## Concrete syntax: Uppercase_ID [ lowercase_ID ... lowercase_ID )
##
## Ends in an error in state: 291.
##
## nonempty_list(cardinality) -> LBRACK rhs(False) ETC rhs(False) . RBRACK [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK rhs(False) ETC rhs(False) . RBRACK nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
##
## The known suffix of the stack is as follows:
## LBRACK rhs(False) ETC rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID LBRACK LID ETC LID RBRACK X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID [ lowercase_ID ... lowercase_ID ] <????>
##
## Ends in an error in state: 292.
##
## nonempty_list(cardinality) -> LBRACK rhs(False) ETC rhs(False) RBRACK . [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
## nonempty_list(cardinality) -> LBRACK rhs(False) ETC rhs(False) RBRACK . nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMPONENT COMMA COLON AT ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACK rhs(False) ETC rhs(False) RBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: UID WORD X__ERR_TOK2
##
## Concrete syntax: Uppercase_ID `word` <????>
##
## Ends in an error in state: 297.
##
## dot_rhs_ty -> UID rhs_type_params . [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
## dot_rhs_ty -> UID rhs_type_params . nonempty_list(cardinality) [ RPAREN RABRAC OFTYPE LPAREN LBRACE EQUAL DOT COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## UID rhs_type_params
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE X__ERR_TOK2
##
## Concrete syntax: type <????>
##
## Ends in an error in state: 300.
##
## assignment(False) -> TYPE . lhs_type EQUAL typespec COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## decl -> TYPE . lhs_type COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## decl -> TYPE . more_list(COMMA,lhs_type) COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE UID X__ERR_TOK2
##
## Concrete syntax: type Uppercase_ID <????>
##
## Ends in an error in state: 301.
##
## lhs_type -> UID . option(lhs_type_params) [ RPAREN EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## UID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE UID LABRAC X__ERR_TOK2
##
## Concrete syntax: type Uppercase_ID < <????>
##
## Ends in an error in state: 303.
##
## type_params(uid_or_word) -> LABRAC . loption(separated_nonempty_list(COMMA,arg(uid_or_word))) RABRAC [ SUBTYPEOF RPAREN LPAREN LBRACE HOOK EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LABRAC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE UID LABRAC UID X__ERR_TOK2
##
## Concrete syntax: type Uppercase_ID < Uppercase_ID <????>
##
## Ends in an error in state: 311.
##
## separated_nonempty_list(COMMA,arg(uid_or_word)) -> arg(uid_or_word) . [ RABRAC ]
## separated_nonempty_list(COMMA,arg(uid_or_word)) -> arg(uid_or_word) . COMMA separated_nonempty_list(COMMA,arg(uid_or_word)) [ RABRAC ]
##
## The known suffix of the stack is as follows:
## arg(uid_or_word)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE UID LABRAC UID COMMA X__ERR_TOK2
##
## Concrete syntax: type Uppercase_ID < Uppercase_ID , <????>
##
## Ends in an error in state: 312.
##
## separated_nonempty_list(COMMA,arg(uid_or_word)) -> arg(uid_or_word) COMMA . separated_nonempty_list(COMMA,arg(uid_or_word)) [ RABRAC ]
##
## The known suffix of the stack is as follows:
## arg(uid_or_word) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE LPAREN X__ERR_TOK2
##
## Concrete syntax: type ( <????>
##
## Ends in an error in state: 317.
##
## inpar(more_list(COMMA,arg(lax(lhs_type)))) -> LPAREN . more_list(COMMA,arg(lax(lhs_type))) RPAREN [ RPAREN EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE LPAREN QMARK X__ERR_TOK2
##
## Concrete syntax: type ( ? <????>
##
## Ends in an error in state: 326.
##
## more_list(COMMA,arg(lax(lhs_type))) -> arg(lax(lhs_type)) . COMMA separated_nonempty_list(COMMA,arg(lax(lhs_type))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## arg(lax(lhs_type))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE LPAREN UID COMMA X__ERR_TOK2
##
## Concrete syntax: type ( Uppercase_ID , <????>
##
## Ends in an error in state: 327.
##
## more_list(COMMA,arg(lax(lhs_type))) -> arg(lax(lhs_type)) COMMA . separated_nonempty_list(COMMA,arg(lax(lhs_type))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## arg(lax(lhs_type)) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE LPAREN UID COMMA QMARK X__ERR_TOK2
##
## Concrete syntax: type ( Uppercase_ID , ? <????>
##
## Ends in an error in state: 329.
##
## separated_nonempty_list(COMMA,arg(lax(lhs_type))) -> arg(lax(lhs_type)) . [ RPAREN ]
## separated_nonempty_list(COMMA,arg(lax(lhs_type))) -> arg(lax(lhs_type)) . COMMA separated_nonempty_list(COMMA,arg(lax(lhs_type))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## arg(lax(lhs_type))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE LPAREN UID COMMA UID COMMA X__ERR_TOK2
##
## Concrete syntax: type ( Uppercase_ID , Uppercase_ID , <????>
##
## Ends in an error in state: 330.
##
## separated_nonempty_list(COMMA,arg(lax(lhs_type))) -> arg(lax(lhs_type)) COMMA . separated_nonempty_list(COMMA,arg(lax(lhs_type))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## arg(lax(lhs_type)) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE UID RPAREN
##
## Concrete syntax: type Uppercase_ID )
##
## Ends in an error in state: 334.
##
## assignment(False) -> TYPE lhs_type . EQUAL typespec COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## decl -> TYPE lhs_type . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## more_list(COMMA,lhs_type) -> lhs_type . COMMA separated_nonempty_list(COMMA,lhs_type) [ COLON ]
##
## The known suffix of the stack is as follows:
## TYPE lhs_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 301, spurious reduction of production option(lhs_type_params) ->
## In state 315, spurious reduction of production lhs_type -> UID option(lhs_type_params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE UID EQUAL X__ERR_TOK2
##
## Concrete syntax: type Uppercase_ID = <????>
##
## Ends in an error in state: 335.
##
## assignment(False) -> TYPE lhs_type EQUAL . typespec COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## TYPE lhs_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE UID EQUAL UID RPAREN
##
## Concrete syntax: type Uppercase_ID = Uppercase_ID )
##
## Ends in an error in state: 336.
##
## assignment(False) -> TYPE lhs_type EQUAL typespec . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## TYPE lhs_type EQUAL typespec
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production dot_rhs_ty -> UID
## In state 174, spurious reduction of production typename -> dot_rhs_ty
## In state 163, spurious reduction of production tagged_type -> typename
## In state 165, spurious reduction of production typespec -> tagged_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE UID COMMA X__ERR_TOK2
##
## Concrete syntax: type Uppercase_ID , <????>
##
## Ends in an error in state: 338.
##
## more_list(COMMA,lhs_type) -> lhs_type COMMA . separated_nonempty_list(COMMA,lhs_type) [ COLON ]
##
## The known suffix of the stack is as follows:
## lhs_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE UID COMMA UID RPAREN
##
## Concrete syntax: type Uppercase_ID , Uppercase_ID )
##
## Ends in an error in state: 340.
##
## separated_nonempty_list(COMMA,lhs_type) -> lhs_type . [ COLON ]
## separated_nonempty_list(COMMA,lhs_type) -> lhs_type . COMMA separated_nonempty_list(COMMA,lhs_type) [ COLON ]
##
## The known suffix of the stack is as follows:
## lhs_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 301, spurious reduction of production option(lhs_type_params) ->
## In state 315, spurious reduction of production lhs_type -> UID option(lhs_type_params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: TYPE UID COMMA UID COMMA X__ERR_TOK2
##
## Concrete syntax: type Uppercase_ID , Uppercase_ID , <????>
##
## Ends in an error in state: 341.
##
## separated_nonempty_list(COMMA,lhs_type) -> lhs_type COMMA . separated_nonempty_list(COMMA,lhs_type) [ COLON ]
##
## The known suffix of the stack is as follows:
## lhs_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: PRAGMA X__ERR_TOK2
##
## Concrete syntax: :: <????>
##
## Ends in an error in state: 344.
##
## pragma -> PRAGMA . dot_rhs COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## PRAGMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: PRAGMA LID X__ERR_TOK2
##
## Concrete syntax: :: lowercase_ID <????>
##
## Ends in an error in state: 345.
##
## call(dot_rhs,rhs(False)) -> dot_rhs . LPAREN RPAREN [ LPAREN LBRACE DOT COLON ]
## call(dot_rhs,rhs(False)) -> dot_rhs . inpar(arg_list(lax(rhs(False)))) [ LPAREN LBRACE DOT COLON ]
## dot_rhs -> dot_rhs . DOT LID [ LPAREN LBRACE DOT COLON ]
## dot_rhs -> dot_rhs . DOT str [ LPAREN LBRACE DOT COLON ]
## dot_rhs -> dot_rhs . DOT SQUARE [ LPAREN LBRACE DOT COLON ]
## dot_rhs -> dot_rhs . LBRACE RBRACE [ LPAREN LBRACE DOT COLON ]
## dot_rhs -> dot_rhs . LBRACE nonempty_list(set) RBRACE [ LPAREN LBRACE DOT COLON ]
## dot_rhs_ty -> dot_rhs . DOT UID [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs . DOT UID rhs_type_params [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs . DOT UID nonempty_list(cardinality) [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs . DOT UID rhs_type_params nonempty_list(cardinality) [ LPAREN LBRACE DOT ]
## pragma -> PRAGMA dot_rhs . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## PRAGMA dot_rhs
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET X__ERR_TOK2
##
## Concrete syntax: let <????>
##
## Ends in an error in state: 347.
##
## assignment(False) -> LET . SQUARE _fun_in_par(t,lhs_id) EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## assignment(False) -> LET . _fun_in_par(t,simple_lhs) EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## assignment(False) -> LET . _fun_in_par(t,lhs_fun) EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## assignment(False) -> LET . LBRACK rhs(False) RBRACK EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## assignment(False) -> LET . LBRACK PLUS RBRACK EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## assignment(False) -> LET . SQUARE EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## decl -> LET . SQUARE _fun_in_par(t,lhs_id) COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## decl -> LET . lhs_sig COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## decl -> LET . more_list(COMMA,lhs_sig) COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET SQUARE X__ERR_TOK2
##
## Concrete syntax: let [] <????>
##
## Ends in an error in state: 348.
##
## assignment(False) -> LET SQUARE . _fun_in_par(t,lhs_id) EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## assignment(False) -> LET SQUARE . EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## decl -> LET SQUARE . _fun_in_par(t,lhs_id) COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LET SQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET SQUARE EQUAL X__ERR_TOK2
##
## Concrete syntax: let [] = <????>
##
## Ends in an error in state: 349.
##
## assignment(False) -> LET SQUARE EQUAL . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LET SQUARE EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET SQUARE LID RPAREN
##
## Concrete syntax: let [] lowercase_ID )
##
## Ends in an error in state: 351.
##
## assignment(False) -> LET SQUARE _fun_in_par(t,lhs_id) . EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## decl -> LET SQUARE _fun_in_par(t,lhs_id) . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LET SQUARE _fun_in_par(t,lhs_id)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production _fun_in_par(t,lhs_id) -> LID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET SQUARE LID EQUAL X__ERR_TOK2
##
## Concrete syntax: let [] lowercase_ID = <????>
##
## Ends in an error in state: 352.
##
## assignment(False) -> LET SQUARE _fun_in_par(t,lhs_id) EQUAL . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LET SQUARE _fun_in_par(t,lhs_id) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN X__ERR_TOK2
##
## Concrete syntax: let ( <????>
##
## Ends in an error in state: 355.
##
## inpar(_fun_in_par(t,lhs_fun)) -> LPAREN . _fun_in_par(t,lhs_fun) RPAREN [ RPAREN OFTYPE EQUAL COMMA ]
## inpar(_fun_in_par(t,simple_lhs)) -> LPAREN . _fun_in_par(t,simple_lhs) RPAREN [ RPAREN OFTYPE EQUAL COMMA COLON ]
## inpar(more_list(COMMA,lhs)) -> LPAREN . more_list(COMMA,lhs) RPAREN [ RPAREN OFTYPE EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN SQUARE X__ERR_TOK2
##
## Concrete syntax: let ( [] <????>
##
## Ends in an error in state: 356.
##
## more_list(COMMA,lhs) -> SQUARE . COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## SQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN SQUARE COMMA X__ERR_TOK2
##
## Concrete syntax: let ( [] , <????>
##
## Ends in an error in state: 357.
##
## more_list(COMMA,lhs) -> SQUARE COMMA . separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## SQUARE COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA SQUARE X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID , [] <????>
##
## Ends in an error in state: 358.
##
## separated_nonempty_list(COMMA,lhs) -> SQUARE . [ RPAREN ]
## separated_nonempty_list(COMMA,lhs) -> SQUARE . COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## SQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA SQUARE COMMA X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID , [] , <????>
##
## Ends in an error in state: 359.
##
## separated_nonempty_list(COMMA,lhs) -> SQUARE COMMA . separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## SQUARE COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LITEXP X__ERR_TOK2
##
## Concrete syntax: let <<literal expression>> <????>
##
## Ends in an error in state: 360.
##
## _fun_in_par(t,simple_lhs) -> LITEXP . [ RPAREN EQUAL COMMA COLON ]
## _fun_in_par(t,simple_lhs) -> LITEXP . of_type [ RPAREN EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LITEXP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID <????>
##
## Ends in an error in state: 362.
##
## _fun_in_par(t,simple_lhs) -> LID . [ RPAREN EQUAL COMMA COLON ]
## _fun_in_par(t,simple_lhs) -> LID . of_type [ RPAREN EQUAL COMMA COLON ]
## lhs_fun -> LID . LPAREN RPAREN [ RPAREN OFTYPE EQUAL COMMA ]
## lhs_fun -> LID . inpar(arg_list(some(tpar(lhs_id,True)))) [ RPAREN OFTYPE EQUAL COMMA ]
## lhs_fun -> LID . LPAREN RPAREN ARROW lax(typespec) [ RPAREN OFTYPE EQUAL COMMA ]
## lhs_fun -> LID . inpar(arg_list(some(tpar(lhs_id,True)))) ARROW lax(typespec) [ RPAREN OFTYPE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## LID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID ( <????>
##
## Ends in an error in state: 363.
##
## inpar(arg_list(some(tpar(lhs_id,True)))) -> LPAREN . arg_list(some(tpar(lhs_id,True))) RPAREN [ RPAREN OFTYPE EQUAL COMMA ARROW ]
## lhs_fun -> LID LPAREN . RPAREN [ RPAREN OFTYPE EQUAL COMMA ]
## lhs_fun -> LID LPAREN . RPAREN ARROW lax(typespec) [ RPAREN OFTYPE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## LID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN RPAREN X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID ( ) <????>
##
## Ends in an error in state: 364.
##
## lhs_fun -> LID LPAREN RPAREN . [ RPAREN OFTYPE EQUAL COMMA ]
## lhs_fun -> LID LPAREN RPAREN . ARROW lax(typespec) [ RPAREN OFTYPE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## LID LPAREN RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN RPAREN ARROW X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID ( ) -> <????>
##
## Ends in an error in state: 365.
##
## lhs_fun -> LID LPAREN RPAREN ARROW . lax(typespec) [ RPAREN OFTYPE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## LID LPAREN RPAREN ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN RPAREN ARROW QMARK X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID ( ) -> ? <????>
##
## Ends in an error in state: 366.
##
## lax(tagged_type) -> QMARK . [ ARROW ]
## lax(typespec) -> QMARK . [ RPAREN OFTYPE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## QMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN ETC X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID ( ... <????>
##
## Ends in an error in state: 369.
##
## arg_list(some(tpar(lhs_id,True))) -> ETC . COMMA arg_list_was_etc(some(tpar(lhs_id,True))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## ETC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN ETC COMMA X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID ( ... , <????>
##
## Ends in an error in state: 370.
##
## arg_list(some(tpar(lhs_id,True))) -> ETC COMMA . arg_list_was_etc(some(tpar(lhs_id,True))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## ETC COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN ETC COMMA LID EQUAL
##
## Concrete syntax: let lowercase_ID ( ... , lowercase_ID =
##
## Ends in an error in state: 371.
##
## arg_list_was_etc(some(tpar(lhs_id,True))) -> some(tpar(lhs_id,True)) . COMMA arg_list_continue(some(tpar(lhs_id,True))) [ RPAREN ]
## arg_list_was_etc(some(tpar(lhs_id,True))) -> some(tpar(lhs_id,True)) . [ RPAREN ]
##
## The known suffix of the stack is as follows:
## some(tpar(lhs_id,True))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production _fun_in_par(t,lhs_id) -> LID
## In state 376, spurious reduction of production some(tpar(lhs_id,True)) -> _fun_in_par(t,lhs_id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN ETC COMMA LID COMMA X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID ( ... , lowercase_ID , <????>
##
## Ends in an error in state: 372.
##
## arg_list_was_etc(some(tpar(lhs_id,True))) -> some(tpar(lhs_id,True)) COMMA . arg_list_continue(some(tpar(lhs_id,True))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## some(tpar(lhs_id,True)) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN LID COMMA ETC X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID ( lowercase_ID , ... <????>
##
## Ends in an error in state: 373.
##
## arg_list_continue(some(tpar(lhs_id,True))) -> ETC . COMMA arg_list_was_etc(some(tpar(lhs_id,True))) [ RPAREN ]
## arg_list_continue(some(tpar(lhs_id,True))) -> ETC . [ RPAREN ]
##
## The known suffix of the stack is as follows:
## ETC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN LID COMMA ETC COMMA X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID ( lowercase_ID , ... , <????>
##
## Ends in an error in state: 374.
##
## arg_list_continue(some(tpar(lhs_id,True))) -> ETC COMMA . arg_list_was_etc(some(tpar(lhs_id,True))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## ETC COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN LID COMMA LID EQUAL
##
## Concrete syntax: let lowercase_ID ( lowercase_ID , lowercase_ID =
##
## Ends in an error in state: 377.
##
## arg_list_continue(some(tpar(lhs_id,True))) -> some(tpar(lhs_id,True)) . COMMA arg_list_continue(some(tpar(lhs_id,True))) [ RPAREN ]
## arg_list_continue(some(tpar(lhs_id,True))) -> some(tpar(lhs_id,True)) . [ RPAREN ]
##
## The known suffix of the stack is as follows:
## some(tpar(lhs_id,True))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production _fun_in_par(t,lhs_id) -> LID
## In state 376, spurious reduction of production some(tpar(lhs_id,True)) -> _fun_in_par(t,lhs_id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN LID COMMA LID COMMA X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID ( lowercase_ID , lowercase_ID , <????>
##
## Ends in an error in state: 378.
##
## arg_list_continue(some(tpar(lhs_id,True))) -> some(tpar(lhs_id,True)) COMMA . arg_list_continue(some(tpar(lhs_id,True))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## some(tpar(lhs_id,True)) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN LID EQUAL
##
## Concrete syntax: let lowercase_ID ( lowercase_ID =
##
## Ends in an error in state: 382.
##
## arg_list(some(tpar(lhs_id,True))) -> some(tpar(lhs_id,True)) . COMMA arg_list_continue(some(tpar(lhs_id,True))) [ RPAREN ]
## arg_list(some(tpar(lhs_id,True))) -> some(tpar(lhs_id,True)) . [ RPAREN ]
##
## The known suffix of the stack is as follows:
## some(tpar(lhs_id,True))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production _fun_in_par(t,lhs_id) -> LID
## In state 376, spurious reduction of production some(tpar(lhs_id,True)) -> _fun_in_par(t,lhs_id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN LID COMMA X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID ( lowercase_ID , <????>
##
## Ends in an error in state: 383.
##
## arg_list(some(tpar(lhs_id,True))) -> some(tpar(lhs_id,True)) COMMA . arg_list_continue(some(tpar(lhs_id,True))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## some(tpar(lhs_id,True)) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN LID RPAREN X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID ( lowercase_ID ) <????>
##
## Ends in an error in state: 388.
##
## lhs_fun -> LID inpar(arg_list(some(tpar(lhs_id,True)))) . [ RPAREN OFTYPE EQUAL COMMA ]
## lhs_fun -> LID inpar(arg_list(some(tpar(lhs_id,True)))) . ARROW lax(typespec) [ RPAREN OFTYPE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## LID inpar(arg_list(some(tpar(lhs_id,True))))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN LID RPAREN ARROW X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID ( lowercase_ID ) -> <????>
##
## Ends in an error in state: 389.
##
## lhs_fun -> LID inpar(arg_list(some(tpar(lhs_id,True)))) ARROW . lax(typespec) [ RPAREN OFTYPE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## LID inpar(arg_list(some(tpar(lhs_id,True)))) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA LBRACK X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID , [ <????>
##
## Ends in an error in state: 391.
##
## separated_nonempty_list(COMMA,lhs) -> LBRACK . rhs(False) RBRACK [ RPAREN ]
## separated_nonempty_list(COMMA,lhs) -> LBRACK . PLUS RBRACK [ RPAREN ]
## separated_nonempty_list(COMMA,lhs) -> LBRACK . rhs(False) RBRACK COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
## separated_nonempty_list(COMMA,lhs) -> LBRACK . PLUS RBRACK COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA LBRACK PLUS X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID , [ + <????>
##
## Ends in an error in state: 392.
##
## preop -> PLUS . [ UID SQUARE PREOP PLUS MINUS LPAREN LID LBRACK IF FOR EXISTS BSTRING BANG ]
## separated_nonempty_list(COMMA,lhs) -> LBRACK PLUS . RBRACK [ RPAREN ]
## separated_nonempty_list(COMMA,lhs) -> LBRACK PLUS . RBRACK COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LBRACK PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA LBRACK PLUS RBRACK X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID , [ + ] <????>
##
## Ends in an error in state: 393.
##
## separated_nonempty_list(COMMA,lhs) -> LBRACK PLUS RBRACK . [ RPAREN ]
## separated_nonempty_list(COMMA,lhs) -> LBRACK PLUS RBRACK . COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LBRACK PLUS RBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA LBRACK PLUS RBRACK COMMA X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID , [ + ] , <????>
##
## Ends in an error in state: 394.
##
## separated_nonempty_list(COMMA,lhs) -> LBRACK PLUS RBRACK COMMA . separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LBRACK PLUS RBRACK COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA LID RPAREN X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID , lowercase_ID ) <????>
##
## Ends in an error in state: 395.
##
## _fun_in_par(t,simple_lhs) -> tuple(lhs) . [ RPAREN EQUAL COMMA COLON ]
## _fun_in_par(t,simple_lhs) -> tuple(lhs) . of_type [ RPAREN EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## tuple(lhs)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN RPAREN ARROW UID RABRAC
##
## Concrete syntax: let lowercase_ID ( ) -> Uppercase_ID >
##
## Ends in an error in state: 398.
##
## _fun_in_par(t,lhs_fun) -> lhs_fun . [ RPAREN EQUAL COMMA ]
## _fun_in_par(t,lhs_fun) -> lhs_fun . of_type [ RPAREN EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## lhs_fun
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production dot_rhs_ty -> UID
## In state 174, spurious reduction of production typename -> dot_rhs_ty
## In state 163, spurious reduction of production tagged_type -> typename
## In state 165, spurious reduction of production typespec -> tagged_type
## In state 367, spurious reduction of production lax(typespec) -> typespec
## In state 368, spurious reduction of production lhs_fun -> LID LPAREN RPAREN ARROW lax(typespec)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID RPAREN X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID ) <????>
##
## Ends in an error in state: 401.
##
## _fun_in_par(t,simple_lhs) -> inpar(_fun_in_par(t,simple_lhs)) . [ RPAREN EQUAL COMMA COLON ]
## _fun_in_par(t,simple_lhs) -> inpar(_fun_in_par(t,simple_lhs)) . of_type [ RPAREN EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## inpar(_fun_in_par(t,simple_lhs))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID LPAREN RPAREN RPAREN X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID ( ) ) <????>
##
## Ends in an error in state: 403.
##
## _fun_in_par(t,lhs_fun) -> inpar(_fun_in_par(t,lhs_fun)) . [ RPAREN EQUAL COMMA ]
## _fun_in_par(t,lhs_fun) -> inpar(_fun_in_par(t,lhs_fun)) . of_type [ RPAREN EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## inpar(_fun_in_par(t,lhs_fun))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA LID EQUAL
##
## Concrete syntax: let ( lowercase_ID , lowercase_ID =
##
## Ends in an error in state: 405.
##
## separated_nonempty_list(COMMA,lhs) -> _fun_in_par(t,simple_lhs) . [ RPAREN ]
## separated_nonempty_list(COMMA,lhs) -> _fun_in_par(t,simple_lhs) . COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## _fun_in_par(t,simple_lhs)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 362, spurious reduction of production _fun_in_par(t,simple_lhs) -> LID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA LID COMMA X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID , lowercase_ID , <????>
##
## Ends in an error in state: 406.
##
## separated_nonempty_list(COMMA,lhs) -> _fun_in_par(t,simple_lhs) COMMA . separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## _fun_in_par(t,simple_lhs) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA LID LPAREN RPAREN EQUAL
##
## Concrete syntax: let ( lowercase_ID , lowercase_ID ( ) =
##
## Ends in an error in state: 408.
##
## separated_nonempty_list(COMMA,lhs) -> _fun_in_par(t,lhs_fun) . [ RPAREN ]
## separated_nonempty_list(COMMA,lhs) -> _fun_in_par(t,lhs_fun) . COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## _fun_in_par(t,lhs_fun)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 364, spurious reduction of production lhs_fun -> LID LPAREN RPAREN
## In state 398, spurious reduction of production _fun_in_par(t,lhs_fun) -> lhs_fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA LID LPAREN RPAREN COMMA X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID , lowercase_ID ( ) , <????>
##
## Ends in an error in state: 409.
##
## separated_nonempty_list(COMMA,lhs) -> _fun_in_par(t,lhs_fun) COMMA . separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## _fun_in_par(t,lhs_fun) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA LBRACK LID RPAREN
##
## Concrete syntax: let ( lowercase_ID , [ lowercase_ID )
##
## Ends in an error in state: 411.
##
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## separated_nonempty_list(COMMA,lhs) -> LBRACK rhs(False) . RBRACK [ RPAREN ]
## separated_nonempty_list(COMMA,lhs) -> LBRACK rhs(False) . RBRACK COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LBRACK rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA LBRACK LID RBRACK X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID , [ lowercase_ID ] <????>
##
## Ends in an error in state: 412.
##
## separated_nonempty_list(COMMA,lhs) -> LBRACK rhs(False) RBRACK . [ RPAREN ]
## separated_nonempty_list(COMMA,lhs) -> LBRACK rhs(False) RBRACK . COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LBRACK rhs(False) RBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA LBRACK LID RBRACK COMMA X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID , [ lowercase_ID ] , <????>
##
## Ends in an error in state: 413.
##
## separated_nonempty_list(COMMA,lhs) -> LBRACK rhs(False) RBRACK COMMA . separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LBRACK rhs(False) RBRACK COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LBRACK X__ERR_TOK2
##
## Concrete syntax: let ( [ <????>
##
## Ends in an error in state: 417.
##
## more_list(COMMA,lhs) -> LBRACK . rhs(False) RBRACK COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
## more_list(COMMA,lhs) -> LBRACK . PLUS RBRACK COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LBRACK PLUS X__ERR_TOK2
##
## Concrete syntax: let ( [ + <????>
##
## Ends in an error in state: 418.
##
## more_list(COMMA,lhs) -> LBRACK PLUS . RBRACK COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
## preop -> PLUS . [ UID SQUARE PREOP PLUS MINUS LPAREN LID LBRACK IF FOR EXISTS BSTRING BANG ]
##
## The known suffix of the stack is as follows:
## LBRACK PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LBRACK PLUS RBRACK X__ERR_TOK2
##
## Concrete syntax: let ( [ + ] <????>
##
## Ends in an error in state: 419.
##
## more_list(COMMA,lhs) -> LBRACK PLUS RBRACK . COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LBRACK PLUS RBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LBRACK PLUS RBRACK COMMA X__ERR_TOK2
##
## Concrete syntax: let ( [ + ] , <????>
##
## Ends in an error in state: 420.
##
## more_list(COMMA,lhs) -> LBRACK PLUS RBRACK COMMA . separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LBRACK PLUS RBRACK COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LBRACK LID RPAREN
##
## Concrete syntax: let ( [ lowercase_ID )
##
## Ends in an error in state: 422.
##
## more_list(COMMA,lhs) -> LBRACK rhs(False) . RBRACK COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
##
## The known suffix of the stack is as follows:
## LBRACK rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LBRACK LID RBRACK X__ERR_TOK2
##
## Concrete syntax: let ( [ lowercase_ID ] <????>
##
## Ends in an error in state: 423.
##
## more_list(COMMA,lhs) -> LBRACK rhs(False) RBRACK . COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LBRACK rhs(False) RBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LBRACK LID RBRACK COMMA X__ERR_TOK2
##
## Concrete syntax: let ( [ lowercase_ID ] , <????>
##
## Ends in an error in state: 424.
##
## more_list(COMMA,lhs) -> LBRACK rhs(False) RBRACK COMMA . separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LBRACK rhs(False) RBRACK COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID EQUAL
##
## Concrete syntax: let ( lowercase_ID =
##
## Ends in an error in state: 428.
##
## inpar(_fun_in_par(t,simple_lhs)) -> LPAREN _fun_in_par(t,simple_lhs) . RPAREN [ RPAREN OFTYPE EQUAL COMMA COLON ]
## more_list(COMMA,lhs) -> _fun_in_par(t,simple_lhs) . COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN _fun_in_par(t,simple_lhs)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 362, spurious reduction of production _fun_in_par(t,simple_lhs) -> LID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID COMMA X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID , <????>
##
## Ends in an error in state: 430.
##
## more_list(COMMA,lhs) -> _fun_in_par(t,simple_lhs) COMMA . separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## _fun_in_par(t,simple_lhs) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID LPAREN RPAREN EQUAL
##
## Concrete syntax: let ( lowercase_ID ( ) =
##
## Ends in an error in state: 432.
##
## inpar(_fun_in_par(t,lhs_fun)) -> LPAREN _fun_in_par(t,lhs_fun) . RPAREN [ RPAREN OFTYPE EQUAL COMMA ]
## more_list(COMMA,lhs) -> _fun_in_par(t,lhs_fun) . COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN _fun_in_par(t,lhs_fun)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 364, spurious reduction of production lhs_fun -> LID LPAREN RPAREN
## In state 398, spurious reduction of production _fun_in_par(t,lhs_fun) -> lhs_fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LPAREN LID LPAREN RPAREN COMMA X__ERR_TOK2
##
## Concrete syntax: let ( lowercase_ID ( ) , <????>
##
## Ends in an error in state: 434.
##
## more_list(COMMA,lhs) -> _fun_in_par(t,lhs_fun) COMMA . separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## _fun_in_par(t,lhs_fun) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LBRACK X__ERR_TOK2
##
## Concrete syntax: let [ <????>
##
## Ends in an error in state: 436.
##
## assignment(False) -> LET LBRACK . rhs(False) RBRACK EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## assignment(False) -> LET LBRACK . PLUS RBRACK EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LET LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LBRACK PLUS X__ERR_TOK2
##
## Concrete syntax: let [ + <????>
##
## Ends in an error in state: 437.
##
## assignment(False) -> LET LBRACK PLUS . RBRACK EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## preop -> PLUS . [ UID SQUARE PREOP PLUS MINUS LPAREN LID LBRACK IF FOR EXISTS BSTRING BANG ]
##
## The known suffix of the stack is as follows:
## LET LBRACK PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LBRACK PLUS RBRACK X__ERR_TOK2
##
## Concrete syntax: let [ + ] <????>
##
## Ends in an error in state: 438.
##
## assignment(False) -> LET LBRACK PLUS RBRACK . EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LET LBRACK PLUS RBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LBRACK PLUS RBRACK EQUAL X__ERR_TOK2
##
## Concrete syntax: let [ + ] = <????>
##
## Ends in an error in state: 439.
##
## assignment(False) -> LET LBRACK PLUS RBRACK EQUAL . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LET LBRACK PLUS RBRACK EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LBRACK LID RPAREN
##
## Concrete syntax: let [ lowercase_ID )
##
## Ends in an error in state: 441.
##
## assignment(False) -> LET LBRACK rhs(False) . RBRACK EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## rhs(False) -> rhs(False) . POSTOP0 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP1 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP2 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . EQUAL [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LABRAC [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . RABRAC [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP3 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . PLUS [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . MINUS [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LITEXP [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP4 [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . STAR [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP0 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP1 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP2 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . EQUAL rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LABRAC rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . RABRAC rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP3 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . PLUS rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . MINUS rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . LITEXP rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . POSTOP4 rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . STAR rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(False) -> rhs(False) . BANG LITEXP rhs(False) [ STAR RBRACK RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
##
## The known suffix of the stack is as follows:
## LET LBRACK rhs(False)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
## In state 37, spurious reduction of production rhs(False) -> rhs_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LBRACK LID RBRACK X__ERR_TOK2
##
## Concrete syntax: let [ lowercase_ID ] <????>
##
## Ends in an error in state: 442.
##
## assignment(False) -> LET LBRACK rhs(False) RBRACK . EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LET LBRACK rhs(False) RBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LBRACK LID RBRACK EQUAL X__ERR_TOK2
##
## Concrete syntax: let [ lowercase_ID ] = <????>
##
## Ends in an error in state: 443.
##
## assignment(False) -> LET LBRACK rhs(False) RBRACK EQUAL . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LET LBRACK rhs(False) RBRACK EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID COMMA X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID , <????>
##
## Ends in an error in state: 448.
##
## more_list(COMMA,lhs_sig) -> lhs_sig COMMA . separated_nonempty_list(COMMA,lhs_sig) [ COLON ]
##
## The known suffix of the stack is as follows:
## lhs_sig COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID COMMA LPAREN X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID , ( <????>
##
## Ends in an error in state: 449.
##
## inpar(_fun_in_par(t,simple_lhs)) -> LPAREN . _fun_in_par(t,simple_lhs) RPAREN [ OFTYPE COMMA COLON ]
## inpar(more_list(COMMA,lhs)) -> LPAREN . more_list(COMMA,lhs) RPAREN [ OFTYPE COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID COMMA LPAREN LID LPAREN RPAREN RPAREN
##
## Concrete syntax: let lowercase_ID , ( lowercase_ID ( ) )
##
## Ends in an error in state: 450.
##
## more_list(COMMA,lhs) -> _fun_in_par(t,lhs_fun) . COMMA separated_nonempty_list(COMMA,lhs) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## _fun_in_par(t,lhs_fun)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 364, spurious reduction of production lhs_fun -> LID LPAREN RPAREN
## In state 398, spurious reduction of production _fun_in_par(t,lhs_fun) -> lhs_fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID COMMA LID X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID , lowercase_ID <????>
##
## Ends in an error in state: 451.
##
## _fun_in_par(t,simple_lhs) -> LID . [ COMMA COLON ]
## _fun_in_par(t,simple_lhs) -> LID . of_type [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID COMMA LITEXP RPAREN
##
## Concrete syntax: let lowercase_ID , <<literal expression>> )
##
## Ends in an error in state: 453.
##
## separated_nonempty_list(COMMA,lhs_sig) -> lhs_sig . [ COLON ]
## separated_nonempty_list(COMMA,lhs_sig) -> lhs_sig . COMMA separated_nonempty_list(COMMA,lhs_sig) [ COLON ]
##
## The known suffix of the stack is as follows:
## lhs_sig
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 360, spurious reduction of production _fun_in_par(t,simple_lhs) -> LITEXP
## In state 456, spurious reduction of production lhs_sig -> _fun_in_par(t,simple_lhs)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID COMMA LID COMMA X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID , lowercase_ID , <????>
##
## Ends in an error in state: 454.
##
## separated_nonempty_list(COMMA,lhs_sig) -> lhs_sig COMMA . separated_nonempty_list(COMMA,lhs_sig) [ COLON ]
##
## The known suffix of the stack is as follows:
## lhs_sig COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID RPAREN
##
## Concrete syntax: let lowercase_ID )
##
## Ends in an error in state: 458.
##
## assignment(False) -> LET _fun_in_par(t,simple_lhs) . EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## lhs_sig -> _fun_in_par(t,simple_lhs) . [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LET _fun_in_par(t,simple_lhs)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 362, spurious reduction of production _fun_in_par(t,simple_lhs) -> LID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID EQUAL X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID = <????>
##
## Ends in an error in state: 459.
##
## assignment(False) -> LET _fun_in_par(t,simple_lhs) EQUAL . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LET _fun_in_par(t,simple_lhs) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN RPAREN RPAREN
##
## Concrete syntax: let lowercase_ID ( ) )
##
## Ends in an error in state: 461.
##
## assignment(False) -> LET _fun_in_par(t,lhs_fun) . EQUAL rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LET _fun_in_par(t,lhs_fun)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 364, spurious reduction of production lhs_fun -> LID LPAREN RPAREN
## In state 398, spurious reduction of production _fun_in_par(t,lhs_fun) -> lhs_fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LET LID LPAREN RPAREN EQUAL X__ERR_TOK2
##
## Concrete syntax: let lowercase_ID ( ) = <????>
##
## Ends in an error in state: 462.
##
## assignment(False) -> LET _fun_in_par(t,lhs_fun) EQUAL . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LET _fun_in_par(t,lhs_fun) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: AT X__ERR_TOK2
##
## Concrete syntax: @ <????>
##
## Ends in an error in state: 464.
##
## annotation -> AT . UID [ COMPONENT AT ]
## annotation -> AT . UID rhs_type_params [ COMPONENT AT ]
## annotation -> AT . UID nonempty_list(cardinality) [ COMPONENT AT ]
## annotation -> AT . UID rhs_type_params nonempty_list(cardinality) [ COMPONENT AT ]
##
## The known suffix of the stack is as follows:
## AT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: AT UID X__ERR_TOK2
##
## Concrete syntax: @ Uppercase_ID <????>
##
## Ends in an error in state: 465.
##
## annotation -> AT UID . [ COMPONENT AT ]
## annotation -> AT UID . rhs_type_params [ COMPONENT AT ]
## annotation -> AT UID . nonempty_list(cardinality) [ COMPONENT AT ]
## annotation -> AT UID . rhs_type_params nonempty_list(cardinality) [ COMPONENT AT ]
##
## The known suffix of the stack is as follows:
## AT UID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: AT UID WORD X__ERR_TOK2
##
## Concrete syntax: @ Uppercase_ID `word` <????>
##
## Ends in an error in state: 466.
##
## annotation -> AT UID rhs_type_params . [ COMPONENT AT ]
## annotation -> AT UID rhs_type_params . nonempty_list(cardinality) [ COMPONENT AT ]
##
## The known suffix of the stack is as follows:
## AT UID rhs_type_params
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID COLON RBRACE
##
## Concrete syntax: lowercase_ID ;  }
##
## Ends in an error in state: 469.
##
## start -> structures_or_defs . EOF [ # ]
##
## The known suffix of the stack is as follows:
## structures_or_defs
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 471, spurious reduction of production list(structure_or_def) ->
## In state 478, spurious reduction of production list(structure_or_def) -> structure_or_def list(structure_or_def)
## In state 519, spurious reduction of production structures_or_defs -> list(structure_or_def)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID COLON X__ERR_TOK2
##
## Concrete syntax: lowercase_ID ; <????>
##
## Ends in an error in state: 471.
##
## list(structure_or_def) -> structure_or_def . list(structure_or_def) [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## structure_or_def
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID THEN
##
## Concrete syntax: lowercase_ID then
##
## Ends in an error in state: 473.
##
## rhs(False) -> rhs_value . [ STAR RABRAC POSTOP4 POSTOP3 POSTOP2 POSTOP1 POSTOP0 PLUS MINUS LITEXP LABRAC EQUAL BANG ]
## rhs(True) -> rhs_value . COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## structure_or_def -> rhs_value . SET rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs_value
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production rhs_value -> dot_rhs
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: LID SET X__ERR_TOK2
##
## Concrete syntax: lowercase_ID <- <????>
##
## Ends in an error in state: 474.
##
## structure_or_def -> rhs_value SET . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## rhs_value SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT X__ERR_TOK2
##
## Concrete syntax: component <????>
##
## Ends in an error in state: 480.
##
## component_structure -> list(annotation) COMPONENT . boption(INTERFACE) more_list(COMMA,csig) COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## component_structure -> list(annotation) COMPONENT . boption(INTERFACE) csig component_body [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## list(annotation) COMPONENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT INTERFACE X__ERR_TOK2
##
## Concrete syntax: component interface <????>
##
## Ends in an error in state: 482.
##
## component_structure -> list(annotation) COMPONENT boption(INTERFACE) . more_list(COMMA,csig) COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## component_structure -> list(annotation) COMPONENT boption(INTERFACE) . csig component_body [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## list(annotation) COMPONENT boption(INTERFACE)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID X__ERR_TOK2
##
## Concrete syntax: component Uppercase_ID <????>
##
## Ends in an error in state: 483.
##
## csig -> UID . option(lhs_type_params) option(component_parameters) [ LBRACE HOOK EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## UID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID WORD X__ERR_TOK2
##
## Concrete syntax: component Uppercase_ID `word` <????>
##
## Ends in an error in state: 484.
##
## csig -> UID option(lhs_type_params) . option(component_parameters) [ LBRACE HOOK EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## UID option(lhs_type_params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID LPAREN X__ERR_TOK2
##
## Concrete syntax: component Uppercase_ID ( <????>
##
## Ends in an error in state: 485.
##
## inpar(separated_list(COMMA,arg(tpar(lhs_id,True)))) -> LPAREN . loption(separated_nonempty_list(COMMA,arg(tpar(lhs_id,True)))) RPAREN [ LBRACE HOOK EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID LPAREN ETC X__ERR_TOK2
##
## Concrete syntax: component Uppercase_ID ( ... <????>
##
## Ends in an error in state: 490.
##
## separated_nonempty_list(COMMA,arg(tpar(lhs_id,True))) -> arg(tpar(lhs_id,True)) . [ RPAREN ]
## separated_nonempty_list(COMMA,arg(tpar(lhs_id,True))) -> arg(tpar(lhs_id,True)) . COMMA separated_nonempty_list(COMMA,arg(tpar(lhs_id,True))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## arg(tpar(lhs_id,True))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID LPAREN LID COMMA X__ERR_TOK2
##
## Concrete syntax: component Uppercase_ID ( lowercase_ID , <????>
##
## Ends in an error in state: 491.
##
## separated_nonempty_list(COMMA,arg(tpar(lhs_id,True))) -> arg(tpar(lhs_id,True)) COMMA . separated_nonempty_list(COMMA,arg(tpar(lhs_id,True))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## arg(tpar(lhs_id,True)) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT LPAREN X__ERR_TOK2
##
## Concrete syntax: component ( <????>
##
## Ends in an error in state: 497.
##
## csig -> LPAREN . UID option(lhs_type_params) SUBTYPEOF separated_nonempty_list(COMMA,dot_rhs_ty) RPAREN option(component_parameters) [ LBRACE HOOK EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT LPAREN UID X__ERR_TOK2
##
## Concrete syntax: component ( Uppercase_ID <????>
##
## Ends in an error in state: 498.
##
## csig -> LPAREN UID . option(lhs_type_params) SUBTYPEOF separated_nonempty_list(COMMA,dot_rhs_ty) RPAREN option(component_parameters) [ LBRACE HOOK EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN UID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT LPAREN UID WORD X__ERR_TOK2
##
## Concrete syntax: component ( Uppercase_ID `word` <????>
##
## Ends in an error in state: 499.
##
## csig -> LPAREN UID option(lhs_type_params) . SUBTYPEOF separated_nonempty_list(COMMA,dot_rhs_ty) RPAREN option(component_parameters) [ LBRACE HOOK EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN UID option(lhs_type_params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT LPAREN UID SUBTYPEOF X__ERR_TOK2
##
## Concrete syntax: component ( Uppercase_ID <: <????>
##
## Ends in an error in state: 500.
##
## csig -> LPAREN UID option(lhs_type_params) SUBTYPEOF . separated_nonempty_list(COMMA,dot_rhs_ty) RPAREN option(component_parameters) [ LBRACE HOOK EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN UID option(lhs_type_params) SUBTYPEOF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT LPAREN UID SUBTYPEOF UID RPAREN X__ERR_TOK2
##
## Concrete syntax: component ( Uppercase_ID <: Uppercase_ID ) <????>
##
## Ends in an error in state: 502.
##
## csig -> LPAREN UID option(lhs_type_params) SUBTYPEOF separated_nonempty_list(COMMA,dot_rhs_ty) RPAREN . option(component_parameters) [ LBRACE HOOK EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN UID option(lhs_type_params) SUBTYPEOF separated_nonempty_list(COMMA,dot_rhs_ty) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT LPAREN UID SUBTYPEOF UID RABRAC
##
## Concrete syntax: component ( Uppercase_ID <: Uppercase_ID >
##
## Ends in an error in state: 504.
##
## dot_rhs -> dot_rhs_ty . DOT LID [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs_ty . DOT str [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs_ty . DOT SQUARE [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs_ty . LBRACE RBRACE [ LPAREN LBRACE DOT ]
## dot_rhs -> dot_rhs_ty . LBRACE nonempty_list(set) RBRACE [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs_ty . DOT UID [ RPAREN LPAREN LBRACE DOT COMMA ]
## dot_rhs_ty -> dot_rhs_ty . DOT UID rhs_type_params [ RPAREN LPAREN LBRACE DOT COMMA ]
## dot_rhs_ty -> dot_rhs_ty . DOT UID nonempty_list(cardinality) [ RPAREN LPAREN LBRACE DOT COMMA ]
## dot_rhs_ty -> dot_rhs_ty . DOT UID rhs_type_params nonempty_list(cardinality) [ RPAREN LPAREN LBRACE DOT COMMA ]
## separated_nonempty_list(COMMA,dot_rhs_ty) -> dot_rhs_ty . [ RPAREN ]
## separated_nonempty_list(COMMA,dot_rhs_ty) -> dot_rhs_ty . COMMA separated_nonempty_list(COMMA,dot_rhs_ty) [ RPAREN ]
## tcall(dot_rhs_ty,rhs(False)) -> dot_rhs_ty . some(parameter_list(lax(rhs(False)))) [ LPAREN LBRACE DOT ]
##
## The known suffix of the stack is as follows:
## dot_rhs_ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production dot_rhs_ty -> UID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT LPAREN UID SUBTYPEOF UID COMMA X__ERR_TOK2
##
## Concrete syntax: component ( Uppercase_ID <: Uppercase_ID , <????>
##
## Ends in an error in state: 505.
##
## separated_nonempty_list(COMMA,dot_rhs_ty) -> dot_rhs_ty COMMA . separated_nonempty_list(COMMA,dot_rhs_ty) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## dot_rhs_ty COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID LPAREN RPAREN X__ERR_TOK2
##
## Concrete syntax: component Uppercase_ID ( ) <????>
##
## Ends in an error in state: 509.
##
## component_structure -> list(annotation) COMPONENT boption(INTERFACE) csig . component_body [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## more_list(COMMA,csig) -> csig . COMMA separated_nonempty_list(COMMA,csig) [ COLON ]
##
## The known suffix of the stack is as follows:
## list(annotation) COMPONENT boption(INTERFACE) csig
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID LBRACE X__ERR_TOK2
##
## Concrete syntax: component Uppercase_ID {  <????>
##
## Ends in an error in state: 510.
##
## component_body -> LBRACE . structures_or_defs RBRACE [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## component_body -> LBRACE . structures_or_defs RBRACE nonempty_list(hook) COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID LBRACE LID COLON EOF
##
## Concrete syntax: component Uppercase_ID {  lowercase_ID ; <EOF>
##
## Ends in an error in state: 511.
##
## component_body -> LBRACE structures_or_defs . RBRACE [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## component_body -> LBRACE structures_or_defs . RBRACE nonempty_list(hook) COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LBRACE structures_or_defs
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 471, spurious reduction of production list(structure_or_def) ->
## In state 478, spurious reduction of production list(structure_or_def) -> structure_or_def list(structure_or_def)
## In state 519, spurious reduction of production structures_or_defs -> list(structure_or_def)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID LBRACE RBRACE X__ERR_TOK2
##
## Concrete syntax: component Uppercase_ID {   } <????>
##
## Ends in an error in state: 512.
##
## component_body -> LBRACE structures_or_defs RBRACE . [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## component_body -> LBRACE structures_or_defs RBRACE . nonempty_list(hook) COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## LBRACE structures_or_defs RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID HOOK X__ERR_TOK2
##
## Concrete syntax: component Uppercase_ID ^ <????>
##
## Ends in an error in state: 513.
##
## hook -> HOOK . dot_rhs [ HOOK COLON ]
##
## The known suffix of the stack is as follows:
## HOOK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID HOOK LID X__ERR_TOK2
##
## Concrete syntax: component Uppercase_ID ^ lowercase_ID <????>
##
## Ends in an error in state: 514.
##
## call(dot_rhs,rhs(False)) -> dot_rhs . LPAREN RPAREN [ LPAREN LBRACE HOOK DOT COLON ]
## call(dot_rhs,rhs(False)) -> dot_rhs . inpar(arg_list(lax(rhs(False)))) [ LPAREN LBRACE HOOK DOT COLON ]
## dot_rhs -> dot_rhs . DOT LID [ LPAREN LBRACE HOOK DOT COLON ]
## dot_rhs -> dot_rhs . DOT str [ LPAREN LBRACE HOOK DOT COLON ]
## dot_rhs -> dot_rhs . DOT SQUARE [ LPAREN LBRACE HOOK DOT COLON ]
## dot_rhs -> dot_rhs . LBRACE RBRACE [ LPAREN LBRACE HOOK DOT COLON ]
## dot_rhs -> dot_rhs . LBRACE nonempty_list(set) RBRACE [ LPAREN LBRACE HOOK DOT COLON ]
## dot_rhs_ty -> dot_rhs . DOT UID [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs . DOT UID rhs_type_params [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs . DOT UID nonempty_list(cardinality) [ LPAREN LBRACE DOT ]
## dot_rhs_ty -> dot_rhs . DOT UID rhs_type_params nonempty_list(cardinality) [ LPAREN LBRACE DOT ]
## hook -> HOOK dot_rhs . [ HOOK COLON ]
##
## The known suffix of the stack is as follows:
## HOOK dot_rhs
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: AT UID PLUS RPAREN
##
## Concrete syntax: @ Uppercase_ID + )
##
## Ends in an error in state: 524.
##
## list(annotation) -> annotation . list(annotation) [ COMPONENT ]
##
## The known suffix of the stack is as follows:
## annotation
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 5, spurious reduction of production nonempty_list(cardinality) -> PLUS
## In state 468, spurious reduction of production annotation -> AT UID nonempty_list(cardinality)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID EQUAL X__ERR_TOK2
##
## Concrete syntax: component Uppercase_ID = <????>
##
## Ends in an error in state: 526.
##
## component_body -> EQUAL . rhs(True) [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## component_body -> EQUAL . rhs(True) nonempty_list(hook) COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID EQUAL LID COLON X__ERR_TOK2
##
## Concrete syntax: component Uppercase_ID = lowercase_ID ; <????>
##
## Ends in an error in state: 527.
##
## component_body -> EQUAL rhs(True) . [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
## component_body -> EQUAL rhs(True) . nonempty_list(hook) COLON [ UID TYPE SQUARE RBRACE PREOP PRAGMA PLUS MINUS LPAREN LID LET LBRACK IF FOR EXISTS EOF COMPONENT BSTRING BANG AT ]
##
## The known suffix of the stack is as follows:
## EQUAL rhs(True)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID COMMA X__ERR_TOK2
##
## Concrete syntax: component Uppercase_ID , <????>
##
## Ends in an error in state: 530.
##
## more_list(COMMA,csig) -> csig COMMA . separated_nonempty_list(COMMA,csig) [ COLON ]
##
## The known suffix of the stack is as follows:
## csig COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID COMMA UID LBRACE
##
## Concrete syntax: component Uppercase_ID , Uppercase_ID { 
##
## Ends in an error in state: 532.
##
## separated_nonempty_list(COMMA,csig) -> csig . [ COLON ]
## separated_nonempty_list(COMMA,csig) -> csig . COMMA separated_nonempty_list(COMMA,csig) [ COLON ]
##
## The known suffix of the stack is as follows:
## csig
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 483, spurious reduction of production option(lhs_type_params) ->
## In state 484, spurious reduction of production option(component_parameters) ->
## In state 494, spurious reduction of production csig -> UID option(lhs_type_params) option(component_parameters)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

start: COMPONENT UID COMMA UID COMMA X__ERR_TOK2
##
## Concrete syntax: component Uppercase_ID , Uppercase_ID , <????>
##
## Ends in an error in state: 533.
##
## separated_nonempty_list(COMMA,csig) -> csig COMMA . separated_nonempty_list(COMMA,csig) [ COLON ]
##
## The known suffix of the stack is as follows:
## csig COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

